2---
title: "Mi primara pagina web"
author: "Ramirez Reap Neider"
format:
  html:
    toc: true
    toc-location: left
    number-sections: true
    embed-resources: true
    output-file: index
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this 

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
```{r}
library(TH.data)
source('https://inkaverse.com/setup.r')
library(multcomp)

url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"
gs <- url %>% 
  as_sheets_id()
gs4_auth()
fb <- gs %>% 
  range_read("fb")
str(fb)
modelo <- aov(formula = lfa ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)
```
# box plot
```{r}
ggplot(fb, aes(x = geno, y = lfa, colour = riego)) +
  geom_boxplot(outlier.colour = "red" , outlier.shape = 16, outlier.size = 2) +
  labs(title = "boxplot con interacción de niveles de riego y genotipo" , 
       x = "Interacción Riego y Genotipo",
       y = "Valor de la variable respuesta") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  #Inclinar etiquetas del eje x
```
```{r}

modelo <- aov(formula = hi ~ bloque + riego + geno + riego*geno
              ,data = fb)
anova(modelo)
plot(modelo)
```
# modelo lineal 
```{r}
library(lme4)
modelo <- lme4::lmer(formula = lfa ~ riego + geno + riego*geno + (1|bloque)
              ,data = fb)
anova(modelo)
plot(modelo)
```
```{r}
library(inti)
names(fb) 
str(fb)
model <- remove_outliers(
  data = fb, 
  formula = lfa ~ riego + geno + riego*geno + (1|bloque), 
  plot_diag = TRUE 
)
model
```

```

```
```{r}
modelo <- lm(formula = lfa ~ bloque + riego + geno + riego * geno, data = fb)

anova(modelo)

library(agricolae)

tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)

print(tukey_result)

plot(tukey_result)

library(tidyverse)

  
```

```{r}
grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")
str(grupos)
# Cargar las bibliotecas necesarias
library(agricolae)
library(ggplot2)
library(dplyr)
library(tidyr)

# Ajustar el modelo lineal
modelo <- lm(formula = lfa ~ bloque + riego + geno + riego * geno, data = fb)

# Obtener el resultado de Tukey
tukey_result <- HSD.test(modelo, c("geno", "riego"), group = TRUE)

# Crear un dataframe con los grupos y separar los tratamientos
grupos <- tukey_result$groups %>% 
  rownames_to_column("tratamientos") %>% 
  separate(tratamientos, into = c("geno", "riego"), sep = ":")

# Verificar la estructura del dataframe y los nombres de las columnas
str(grupos)
print(colnames(grupos))  # Verificar nombres de columnas

# Crear el gráfico de barras
ggplot(grupos, aes(x = geno, y = lfa, fill = riego)) +  # Asegúrate de que "LFA" sea el nombre correcto
  geom_bar(stat = "identity", position = position_dodge(), color = "black") +
  labs(title = "Comparación de Medias - Prueba de Tukey", 
       x = "Genotipos", 
       y = "FTL") +
  theme_minimal() +
  theme(legend.title = element_blank()) +
  scale_fill_discrete(name = "Riego")
```

#Analisis multivariado

```{r}
str(fb)
```

##coorrelacion

```{r}
# Cargar librerías necesarias
library(tidyverse)
library(corrplot)

# Asegurarse de que 'fb' esté cargado antes de proceder
# fb <- read.csv("ruta/al/archivo.csv")  # Descomenta y ajusta la ruta si necesitas cargar el archivo

# Filtrar datos para mantener solo columnas numéricas y eliminar filas con NA
fb_clean <- fb %>%
  select(where(~ is.numeric(.) && any(!is.na(.)))) %>%  # Selecciona columnas numéricas con al menos un valor no NA
  drop_na()  # Elimina filas con NA restantes

# Verificar si hay suficientes columnas numéricas para calcular la correlación
if (ncol(fb_clean) > 1) {
  # Calcular la matriz de correlación
  cor_matrix <- cor(fb_clean, use = "complete.obs")
  
  # Imprimir la matriz de correlación
  print(cor_matrix)
  
  # Visualizar la matriz de correlación
  corrplot(cor_matrix, method = "circle")
} else {
  cat("No hay suficientes columnas numéricas o datos completos para calcular la correlación.\n")
}
```
```{r}

library(psych)
library(tidyverse)
fb %>%
  select_if(is.numeric)%>%
  dplyr::select(!c("block"))%>%
  pairs.panels(x= .
              , hist.col="red"
              , pch = 21
              , stars = TRUE
              , scale = FALSE
              , lm = TRUE
                          )
```

### PCA: Analisis de componentes principales 
```{r}
# Cargar la librería FactoMineR
library(FactoMineR)

# Realizar el PCA
mv <- fb %>%
  PCA(scale.unit = TRUE, quali.sup = c(1:4), graph = FALSE)

# Graficar los individuos
plot(mv, habillage = 1)

# Graficar las variables
plot(mv, choix = "var")

# Graficar los individuos nuevamente
plot(mv, choix = "ind")

```



